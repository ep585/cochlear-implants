function v2 = Project3dTo2d(parameters, v3)
    sv3 = size(v3);
    assert(sv3(1) == 3);
    
    % right-hand sense Euler angle rotations
    s = sin(parameters(4));
    c = cos(parameters(4));
    R_roll = [
        c -s 0.0 0.0;
        s c 0.0 0.0;
        0.0 0.0 1.0 0.0;
        0.0 0.0 0.0 1.0
    ];
    s = sin(parameters(5));
    c = cos(parameters(5));
    R_pitch = [
        1.0 0.0 0.0 0.0;
        0.0 c -s 0.0;
        0.0 s c 0.0;
        0.0 0.0 0.0 1.0
    ];
    s = sin(parameters(6));
    c = cos(parameters(6));
    R_yaw = [
        c 0.0 s 0.0;
        0.0 1.0 0.0 0.0;
        -s 0.0 c 0.0;
        0.0 0.0 0.0 1.0
    ];
    
    % translation
    T = [
        1.0 0.0 0.0 parameters(1);
        0.0 1.0 0.0 parameters(2);
        0.0 0.0 1.0 parameters(3);
        0.0 0.0 0.0 1.0;
    ];
    
    % C2 transformation matrix
    sourceXY = [-13.0, 12.2];
    sourceZ = -948.0;
    C2 = [
        1.0 0.0 0.0 -sourceXY(1);
        0.0 1.0 0.0 -sourceXY(2);
        0.0 0.0 1.0 -sourceZ;
        0.0 0.0 0.0 1.0
    ];
    
    % projection matrix
    d = -sourceZ;
    n = d*0.5;
    f = d*1.5;
    P = [
        d 0.0 0.0 0.0;
        0.0 d 0.0 0.0;
        0.0 0.0 n/(n - f) -n*f/(n - f);
        0.0 0.0 1.0 0.0
    ];
    
    % z component is ignored
    vHomogeneous = P*C2*T*R_roll*R_pitch*R_yaw*[v3; ones(1, sv3(2))];
    v2 = vHomogeneous(1:2, :)./vHomogeneous(4, :);
end